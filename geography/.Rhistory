write.table(keep, "individuals.ALL", sep =" ", row.names = F, col.names = F, quote = FALSE)
# Install and load GWAS package qqman
install.packages("qqman", repos = "http://cran.us.r-project.org", quietly = T)
# Install and load GWAS package qqman
install.packages("qqman", repos = "http://cran.us.r-project.org", quietly = T, message=F)
# Install and load GWAS package qqman
if (!require("qqman")) {
install.packages("qqman", repos = "http://cran.us.r-project.org", quietly = T, message=F)
}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
samplesWithDamaged_ds0.1.pca <- pca(samplesWithDamaged_0.001, "pcangsd/PCANGSD_allWithDamaged_ds0.1.cov", "PCA (>0.001X) using PCANGSD (including downsampled modern samples)", "pcaPlots/PCANGSD_allWithDamaged_ds0.1.png")
samplesWithDamaged_ds0.1.pca <- pca(samplesWithDamaged_0.001, "angsd/angsd_allWithDamaged_ds0.1.cov", "PCA (>0.001X) using PCANGSD (including downsampled modern samples)", "pcaPlots/PCANGSD_allWithDamaged_ds0.1.png")
samplesWithDamaged_ds0.1.pca <- pca(samplesWithDamaged_0.001, "angsd/angsd_allWithDamaged_ds0.1.covMat", "PCA (>0.001X) using PCANGSD (including downsampled modern samples)", "pcaPlots/PCANGSD_allWithDamaged_ds0.1.png")
samplesWithDamaged_ds0.1.geno.pca <- pca(samplesWithDamaged_0.001, "pcangsd/PCANGSD_allWithDamaged_ds0.1.cov", "PCA (>0.001X) using PCANGSD (including downsampled modern samples)", "pcaPlots/PCANGSD_allWithDamaged_ds0.1.png")
# Import modules
library(tidyverse)
library(ggplot2)
library(scales)
# Given samples
modern <- read_csv("modern.csv")
ancient <- read_csv("ancient.csv")
# List of damaged individuals
damaged <- list("SRR11905246", "SRR11905247",
"SRR11905250", "SRR11905251",
"SRR11905255", "SRR11905256",
"SRR11905266", "SRR11905267",
"SRR11905260", "SRR11905262")
# No down-sampling for damaged individuals
damagedModern <- read_csv("modern_damage.csv")
# Down-sampling for damaged individuals
# NOT YET COMPUTED
# Bind modern, ancient, and damaged modern samples
samples <- bind_rows(modern, ancient)
samplesWithDamaged <- bind_rows(damagedModern, modern, ancient) %>% filter(!SRR %in% damaged)
samplesWithDamaged$OsteometricalSize[1:10] <- c("Big size", "Big size", "Big size", "Big size", "Small size", "Small size", "Small size", "Small size", "Small size", "Small size")
pca <- function(sampleSubset, covMat, titleOfPlot, titlePNG){
# Performs PCA on a given sample subset based on a covariance matrix input
# Read in covariance matrix
C <- as.matrix(read.table(covMat))
# Perform PCA and add Principal Components to sampleSubset
pca_C <- prcomp(C)
sampleSubset <- sampleSubset %>% mutate(PC1 = pca_C$x[, "PC1"], PC2 = pca_C$x[, "PC2"])
# Count damaged, modern and ancient samples
# Damaged
no.Damaged <- sum(na.omit(startsWith(sampleSubset$SRR, "d")))
# Modern
no.Modern <- sum(na.omit(startsWith(sampleSubset$SRR, "SRR")))
# Ancient
no.Ancient <- sum(na.omit(startsWith(sampleSubset$ExtractionNumber, "C")))
# Principal Component contributions
PC1.percent <- scales::percent(summary(pca_C)$importance[2,1])
PC2.percent <- scales::percent(summary(pca_C)$importance[2,2])
# PCA plot with entire subset
pca_plot <- ggplot() +
{if(no.Damaged != 0)geom_point(data=sampleSubset[1:no.Damaged,], aes(x=PC1, y=PC2, colour=factor(Species), size=3), shape=10)} +
{if(no.Modern != 0)geom_point(data=sampleSubset[(1+no.Damaged):(no.Damaged+no.Modern),], aes(x=PC1, y=PC2, colour=factor(Species)))} +
labs(color = "Species") +
{if(no.Ancient != 0)geom_point(data=sampleSubset[(1+no.Damaged+no.Modern):(no.Damaged+no.Modern+no.Ancient),], aes(x=PC1, y=PC2, shape=factor(OsteometricalSize)))} +
labs(shape = "Osteometrical Size")  +
# Design
labs(title = titleOfPlot) +
xlab(paste0("PC1 (", PC1.percent, ")" )) +
ylab(paste0("PC2 (", PC2.percent, ")" )) +
guides(size=F)
plot(pca_plot)
# Save plot
ggsave(titlePNG, width = 6.5, height = 4)
return(sampleSubset)
}
samples_0.001 <- samples %>% filter(Coverage > 0.001)
samples_0.001.pca <- pca(samples_0.001, "angsd/angsd_0.001.covMat", "PCA (>0.001X) using ANGSD",
"pcaPlots/angsd_0.001.png")
samplesWithDamaged_0.001 <- samplesWithDamaged %>% filter(Coverage > 0.001)
samplesWithDamaged_0.001.pca <- pca(samplesWithDamaged_0.001, "angsd/angsd_allWithDamaged.covMat", "PCA (>0.001X) using ANGSD (including damaged modern samples)", "pcaPlots/angsd_allWithDamaged_0.001.png")
pca(samplesWithDamaged_0.001, "pcangsd/PCANGSD_allWithDamaged.cov", "PCA (>0.001X) using PCANGSD (including damaged modern samples)", "pcaPlots/PCANGSD_allWithDamaged.png")
samplesWithDamaged_ds0.1.geno.pca <- pca(samplesWithDamaged_0.001, "pcangsd/PCANGSD_allWithDamaged_ds0.1.cov", "PCA (>0.001X) using PCANGSD (including downsampled modern samples)", "pcaPlots/PCANGSD_allWithDamaged_ds0.1.png")
samples_LamasWithDamaged_0.01.pca <- pca(samples_LamasWithDamaged_0.01, "angsd/angsd_LamaWithDamaged_ds0.1.covMat", "PCA (>0.01X) using ANGSD (Lama)", "pcaLamasWithDamaged_ds0.1.png")
samples_LamaWithDamaged <- filter(samplesWithDamaged, PC1 < 0 & Coverage > 0.01)
samples_LamaWithDamaged <- filter(samplesWithDamaged_0.001, PC1 < 0 & Coverage > 0.01)
samples_LamaWithDamaged <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.01)
samples_LamasWithDamaged_0.01.pca <- pca(samples_LamasWithDamaged_0.01, "angsd/angsd_LamaWithDamaged_ds0.1.covMat", "PCA (>0.01X) using ANGSD (Lama)", "pcaLamasWithDamaged_ds0.1.png")
samples_LamaWithDamaged <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.01)
samples_LamasWithDamaged_0.01.pca <- pca(samples_LamasWithDamaged, "angsd/angsd_LamaWithDamaged_ds0.1.covMat", "PCA (>0.01X) using ANGSD (Lama)", "pcaLamasWithDamaged_ds0.1.png")
samples_LamaWithDamaged <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.01)
samples_LamasWithDamaged_0.01.pca <- pca(samples_LamaWithDamaged, "angsd/angsd_LamaWithDamaged_ds0.1.covMat", "PCA (>0.01X) using ANGSD (Lama)", "pcaLamasWithDamaged_ds0.1.png")
samples_LamaWithDamaged
samples_LamaWithDamaged <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.01)
samples_LamaWithDamaged <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.01)
samples_LamasWithDamaged_0.01.pca <- pca(samples_LamaWithDamaged, "angsd/angsd_LamaWithDamaged_ds0.1.covMat", "PCA (>0.01X) using ANGSD (Lama)", "pcaLamasWithDamaged_ds0.1.png")
filter(samples_LamasWithDamaged_0.01.pca, between(PC1, -0.5, -0.2) & PC2 < 0)
samples_LamasWithDamaged_0.01.pca <- pca(samples_LamaWithDamaged, "angsd/angsd_LamaWithDamaged_ds0.1.covMat", "PCA (>0.01X) using ANGSD (Lama)", "pcaLamasWithDamaged_ds0.1.png")
samples_LamaWithDamaged
samples
samplesWithDamaged_0.001.pca
samples
samplesWithDamaged_0.001.pca
samples_LamaWithDamaged
samples_LamaWithDamaged <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.01) %>%
filter(!row_number() %in% c(2, 4))
samples_LamaWithDamaged
samples_LamaWithDamaged <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.01) %>%
filter(!row_number() %in% c(2, 4)) %>%
bind_rows(samples_LamaWithDamaged[1:3,], samples[3,], samples_LamaWithDamaged[4:5,],  samples[7,], samples_LamaWithDamaged[6:32,])
samples_LamaWithDamaged
samples_LamaWithDamaged <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.01) %>%
filter(!row_number() %in% c(2, 4))
samples_LamaWithDamaged
samples_LamaWithDamaged <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.01) %>%
filter(!row_number() %in% c(2, 4)) %>%
bind_rows(samples_LamaWithDamaged[1:3,], samples[3,], samples_LamaWithDamaged[4:5,],  samples[7,], samples_LamaWithDamaged[6:30,])
samples_LamaWithDamaged
samples_LamaWithDamaged[1:3,]
samples[3,]
samples_LamaWithDamaged[4:5,]
samples[7,]
samples_LamaWithDamaged[6:30,]
samples_LamaWithDamaged <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.01) %>%
filter(!row_number() %in% c(2, 4))
samples_LamaWithDamaged
samples_LamaWithDamaged <- bind_rows(samples_LamaWithDamaged[1:3,], samples[3,], samples_LamaWithDamaged[4:5,],  samples[7,], samples_LamaWithDamaged[6:30,])
samples_LamaWithDamaged
samples_LamasWithDamaged_0.01.pca <- pca(samples_LamaWithDamaged, "angsd/angsd_LamaWithDamaged_ds0.1.covMat", "PCA (>0.01X) using ANGSD (Lama)", "pcaLamasWithDamaged_ds0.1.png")
filter(samples_LamasWithDamaged_0.01.pca, between(PC1, -0.5, -0.2) & PC2 < 0)
samples_LamasWithDamaged_0.01.pca <- pca(samples_LamaWithDamaged, "angsd/angsd_LamaWithDamaged_ds0.1.covMat", "PCA (>0.01X) using ANGSD (Lama)", "pcaLamasWithDamaged_ds0.1.png")
samples_LamasWithDamaged_0.01.pca
filter(samples_LamasWithDamaged_0.01.pca, between(PC1, -0.5, -0.2) & PC2 < 0)
samples_LamasWithDamaged_0.01.pca <- pca(samples_LamaWithDamaged, "angsd/angsd_LamaWithDamaged_ds0.1.covMat", "PCA (>0.01X) using ANGSD (Lama)", "pcaLamasWithDamaged_ds0.1.png")
samples_LamasWithDamaged_0.01.pca
samples_LamasWithDamaged_0.01.pca[31:32,]
samples_LamaWithDamaged <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.01) %>%
filter(!row_number() %in% c(2, 4))
samples_LamaWithDamaged <- bind_rows(samples_LamaWithDamaged[1:3,], samples[3,], samples_LamaWithDamaged[4:5,],  samples[7,], samples_LamaWithDamaged[6:30,])
samples_LamasWithDamaged_0.01.pca <- pca(samples_LamaWithDamaged, "angsd/angsd_LamaWithDamaged_ds0.1.covMat", "PCA (>0.01X) using ANGSD (Lama)", "pcaLamasWithDamaged_ds0.1.png")
filter(samples_LamasWithDamaged_0.01.pca, between(PC1, -0.5, -0.2) & PC2 < 0)
# 0.1763050	-0.36469092
samples_0.01 <- samples %>% filter(Coverage > 0.01)
samples_0.01.pca <- pca(samples_0.01, "angsd/angsd_0.01.covMat", "PCA (>0.01X) using ANGSD",
"pcaPlots/angsd_0.01.png")
# filter(samples_0.01.pca, PC1 < -1 & between(PC2,-0.1,0 ))
filter(samples_0.001.pca, between(PC1, 1, 2) & PC2 < 0)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram()
# Import modules
library(tidyverse)
library(ggplot2)
library(scales)
# Given samples
modern <- read_csv("modern.csv")
ancient <- read_csv("ancient.csv")
# List of damaged individuals
damaged <- list("SRR11905246", "SRR11905247",
"SRR11905250", "SRR11905251",
"SRR11905255", "SRR11905256",
"SRR11905266", "SRR11905267",
"SRR11905260", "SRR11905262")
# No down-sampling for damaged individuals
damagedModern <- read_csv("modern_damage.csv")
# Down-sampling for damaged individuals
# NOT YET COMPUTED
# Bind modern, ancient, and damaged modern samples
samples <- bind_rows(modern, ancient)
samplesWithDamaged <- bind_rows(damagedModern, modern, ancient) %>% filter(!SRR %in% damaged)
samplesWithDamaged$OsteometricalSize[1:10] <- c("Big size", "Big size", "Big size", "Big size", "Small size", "Small size", "Small size", "Small size", "Small size", "Small size")
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram() +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram() +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato") +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato") +
scale_x_continuous(breaks = round(seq(min(Coverage), max(Coverage), by = 0.5),1)) +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato") +
scale_x_continuous(breaks = round(seq(min(ancient$Coverage), max(ancient$Coverage), by = 0.5),1)) +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato") +
scale_x_continuous(breaks = round(seq(min(ancient$Coverage), max(ancient$Coverage), by = 0.05),1)) +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato") +
scale_x_continuous(breaks = pretty(ancient$Coverage, n = 10)) +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato") +
scale_x_continuous(breaks = pretty(ancient$Coverage, n = 20)) +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato", binwidth = 0.005) +
scale_x_continuous(breaks = pretty(ancient$Coverage, n = 20)) +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
coverage_plot <- ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato", binwidth = 0.005) +
scale_x_continuous(breaks = pretty(ancient$Coverage, n = 20)) +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
plot(coverage_plot)
ggsave("coverage_plot.png", width = 6.5, height = 4)
ancient %>% filter(Coverage > 0.01)
ancient %>% filter(Coverage > 0.1)
filter(samples_0.01.pca, between(PC1,-2,-1) & between(PC2,-0.1,0))
filter(samples_0.01.pca, between(PC1,-2,-1) & between(PC2,-0.22,0.1))
filter(samples_0.01.pca, between(PC1,-2,-1) & between(PC2,-0.1,0))
filter(samples_0.1.pca, PC1 < -1, between(PC2, 0.1, 0.25))
samples
samples_LamaWithDamaged <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.01) %>%
filter(!row_number() %in% c(2, 4))
samples_LamaWithDamaged <- bind_rows(samples_LamaWithDamaged[1:3,], samples[3,], samples_LamaWithDamaged[4:5,],  samples[7,], samples_LamaWithDamaged[6:30,])
samples_LamasWithDamaged_0.01.pca <- pca(samples_LamaWithDamaged, "angsd/angsd_LamaWithDamaged_ds0.1.covMat", "PCA (>0.01X) using ANGSD (Lama)", "pcaLamasWithDamaged_ds0.1.png")
filter(samples_LamasWithDamaged_0.01.pca, between(PC1, -0.5, -0.2) & PC2 < 0)
# 0.1763050	-0.36469092
samplesWithDamaged_ds0.1.geno.pca <- pca(samplesWithDamaged_0.001, "angsd/angsd_allWithDamaged_ds0.1.cov", "PCA (>0.001X) using ANGSD (including downsampled modern samples)", "pcaPlots/angsd_allWithDamaged_ds0.1.png")
samplesWithDamaged_ds0.1.geno.pca <- pca(samplesWithDamaged_0.001, "angsd/angsd_allWithDamaged_ds0.1.cov", "PCA (>0.001X) using ANGSD (including downsampled modern samples)", "pcaPlots/angsd_allWithDamaged_ds0.1.png")
samplesWithDamaged_ds0.1.geno.pca <- pca(samplesWithDamaged_0.001, "angsd/angsd_allWithDamaged_ds0.1.covMat", "PCA (>0.001X) using ANGSD (including downsampled modern samples)", "pcaPlots/angsd_allWithDamaged_ds0.1.png")
samples_LamaWithDamaged_0.1 <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.1)
samples_LamaWithDamaged_0.1
samples_LamaWithDamaged_0.1 <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.1) %>%
filter(!row_number() %in% c(2, 4))
samples_LamaWithDamaged_0.1
samples_LamaWithDamaged_0.1 <- bind_rows(samples_LamaWithDamaged_0.1[1:3,], samples[3,], samples_LamaWithDamaged_0.1[4:5,],  samples_0.1[7,], samples_LamaWithDamaged[6:30,])
samples_LamaWithDamaged_0.1
samples_LamaWithDamaged_0.1 <- bind_rows(samples_LamaWithDamaged_0.1[1:3,], samples[3,], samples_LamaWithDamaged_0.1[4:5,],  samples_0.1[7,], samples_LamaWithDamaged[6:16,])
samples_LamaWithDamaged_0.1
samples_LamaWithDamaged_0.1 <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.1) %>%
filter(!row_number() %in% c(2, 4))
samples_LamaWithDamaged_0.1 <- bind_rows(samples_LamaWithDamaged_0.1[1:3,], samples[3,], samples_LamaWithDamaged_0.1[4:5,],  samples_0.1[7,], samples_LamaWithDamaged_0.1[6:16,])
samples_LamaWithDamaged_0.1 <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.1) %>%
filter(!row_number() %in% c(2, 4))
samples_LamaWithDamaged_0.1 <- bind_rows(samples_LamaWithDamaged_0.1[1:3,], samples[3,], samples_LamaWithDamaged_0.1[4:5,],  samples_0.1[7,], samples_LamaWithDamaged_0.1[6:16,])
samples_LamasWithDamaged_0.1.pca <- pca(samples_LamaWithDamaged_0.1, "angsd/angsd_LamaWithDamaged_0.1_HC.covMat", "PCA (>0.1X) using ANGSD (Lama)", "pcaLamasWithDamaged_0.1_HC.png")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
samples_0.01
# Import modules
library(tidyverse)
library(ggplot2)
library(scales)
samples_dLama <- bind_rows(damagedModern[1,], samples[1,], samples[3:67])
samples_dLama <- bind_rows(damagedModern[1,], samples[1,], samples[3:67,])
samples_dLama
dLama.pca <- pca(samples_dLama, "angsd/oneDamaged/llama.covMat", "PCA (>0.01x) with one damaged llama", "pca_dLama.png")
samples_dLama <- bind_rows(damagedModern[1,], samples_0.01[1,], samples_0.01[3:67,])
dLama.pca <- pca(samples_dLama, "angsd/oneDamaged/llama.covMat", "PCA (>0.01x) with one damaged llama", "pca_dLama.png")
samples_0.01
damagedModern
samples_0.01
samples_dGuanaco <- bind_rows(damagedModern[3,], samples_0.01[1:5,], samples_0.01[6:67,])
dGuanaco.pca <- pca(samples_dGuanaco, "angsd/oneDamaged/guanaco.covMat", "PCA (>0.01x) with one damaged guanaco", "pca_dGuanaco.png")
samples_0.01
samples_dGuanaco <- bind_rows(damagedModern[3,], samples_0.01[1:5,], samples_0.01[7:67,])
dGuanaco.pca <- pca(samples_dGuanaco, "angsd/oneDamaged/guanaco.covMat", "PCA (>0.01x) with one damaged guanaco", "pca_dGuanaco.png")
samples_dVicuna <- bind_rows(damagedModern[9,], samples_0.01[1:15,], samples_0.01[17:67,])
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna.png")
samples_0.01
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
dGuanaco.pca <- pca(samples_dGuanaco, "angsd/oneDamaged/guanaco1.covMat", "PCA (>0.01x) with one damaged guanaco", "pca_dGuanaco1.png")
samples_dGuanaco <- bind_rows(damagedModern[3,], samples_0.01[1:5,], samples_0.01[7:67,])
# Import modules
library(tidyverse)
library(ggplot2)
library(scales)
samples_dGuanaco <- bind_rows(damagedModern[3,], samples_0.01[1:5,], samples_0.01[7:67,])
dGuanaco.pca <- pca(samples_dGuanaco, "angsd/oneDamaged/guanaco1.covMat", "PCA (>0.01x) with one damaged guanaco", "pca_dGuanaco1.png")
samples_dGuanaco <- bind_rows(damagedModern[3,], samples_0.01[1:5,], samples_0.01[7:67,])
dGuanaco.pca <- pca(samples_dGuanaco, "angsd/oneDamaged/guanaco2.covMat", "PCA (>0.01x) with one damaged guanaco", "pca_dGuanaco2.png")
samples_dVicuna <- bind_rows(damagedModern[9,], samples_0.01[1:15,], samples_0.01[17:67,])
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna2.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna2.png")
samples_dVicuna <- bind_rows(damagedModern[9,], samples_0.01[1:15,], samples_0.01[17:67,])
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna.png")
samples_dLama <- bind_rows(damagedModern[1,], samples_0.01[1,], samples_0.01[3:67,])
dLama.pca <- pca(samples_dLama, "angsd/oneDamaged/llama2.covMat", "PCA (>0.01x) with one damaged llama", "pca_dLama2.png")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# Import modules
library(tidyverse)
library(ggplot2)
library(scales)
filter(samples_0.01.pca, between(PC1,-2,-1 ) & between(PC2,-0.4,0.2 ))
filter(samples_0.01.pca, between(PC1,-2,-1 ) & between(PC2,-0.4,-0.2 ))
filter(samples_0.01.pca, between(PC1,-2,-1 ) & between(PC2,-0.4,0.2 ))
filter(samples_0.01.pca, between(PC1,-2,-1 ) & between(PC2,-0.4,-0.2 ))
filter(samples_0.01.pca, between(PC1,-2,-1 ) & between(PC2,0,0.2))
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
ancient
sum(ancient$Location[ancient$Location==TU-54])
sum(ancient$Location[ancient$Location=='TU-54'])
ancient
ancient %>% filter(Location == 'TU-85') %>% nrow()
# Import modules
library(tidyverse)
library(ggplot2)
library(scales)
ancient %>% filter(Location == 'TU-85') %>% nrow()
ancient %>% filter(Location == 'TU-54') %>% nrow()
dVicuna.pca
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna.png")
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna.png")
samples_dVicuna <- bind_rows(damagedModern[9,], samples_0.01[1:15,], samples_0.01[17:67,])
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna.png")
pca <- function(sampleSubset, covMat, titleOfPlot, titlePNG){
# Performs PCA on a given sample subset based on a covariance matrix input
# Read in covariance matrix
C <- as.matrix(read.table(covMat))
# Perform PCA and add Principal Components to sampleSubset
pca_C <- prcomp(C)
sampleSubset <- sampleSubset %>% mutate(PC1 = pca_C$x[, "PC1"], PC2 = pca_C$x[, "PC2"])
sampleSubset$PC1[,1] <- -sampleSubset$PC1[,1]
# Count damaged, modern and ancient samples
# Damaged
no.Damaged <- sum(na.omit(startsWith(sampleSubset$SRR, "d")))
# Modern
no.Modern <- sum(na.omit(startsWith(sampleSubset$SRR, "SRR")))
# Ancient
no.Ancient <- sum(na.omit(startsWith(sampleSubset$ExtractionNumber, "C")))
# Principal Component contributions
PC1.percent <- scales::percent(summary(pca_C)$importance[2,1])
PC2.percent <- scales::percent(summary(pca_C)$importance[2,2])
# PCA plot with entire subset
pca_plot <- ggplot() +
{if(no.Damaged != 0)geom_point(data=sampleSubset[1:no.Damaged,], aes(x=PC1, y=PC2, colour=factor(Species), size=3), shape=10)} +
{if(no.Modern != 0)geom_point(data=sampleSubset[(1+no.Damaged):(no.Damaged+no.Modern),], aes(x=PC1, y=PC2, colour=factor(Species)))} +
labs(color = "Species") +
{if(no.Ancient != 0)geom_point(data=sampleSubset[(1+no.Damaged+no.Modern):(no.Damaged+no.Modern+no.Ancient),], aes(x=PC1, y=PC2, shape=factor(OsteometricalSize)))} +
labs(shape = "Osteometrical Size")  +
# Design
labs(title = titleOfPlot) +
xlab(paste0("PC1 (", PC1.percent, ")" )) +
ylab(paste0("PC2 (", PC2.percent, ")" )) +
guides(size=F)
plot(pca_plot)
# Save plot
ggsave(titlePNG, width = 6.5, height = 4)
return(sampleSubset)
}
samples_dVicuna <- bind_rows(damagedModern[9,], samples_0.01[1:15,], samples_0.01[17:67,])
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna2.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna2.png")
pca <- function(sampleSubset, covMat, titleOfPlot, titlePNG){
# Performs PCA on a given sample subset based on a covariance matrix input
# Read in covariance matrix
C <- as.matrix(read.table(covMat))
# Perform PCA and add Principal Components to sampleSubset
pca_C <- prcomp(C)
sampleSubset <- sampleSubset %>% mutate(PC1 = pca_C$x[, "PC1"], PC2 = pca_C$x[, "PC2"])
sampleSubset$PC1 <- -sampleSubset$PC1
# Count damaged, modern and ancient samples
# Damaged
no.Damaged <- sum(na.omit(startsWith(sampleSubset$SRR, "d")))
# Modern
no.Modern <- sum(na.omit(startsWith(sampleSubset$SRR, "SRR")))
# Ancient
no.Ancient <- sum(na.omit(startsWith(sampleSubset$ExtractionNumber, "C")))
# Principal Component contributions
PC1.percent <- scales::percent(summary(pca_C)$importance[2,1])
PC2.percent <- scales::percent(summary(pca_C)$importance[2,2])
# PCA plot with entire subset
pca_plot <- ggplot() +
{if(no.Damaged != 0)geom_point(data=sampleSubset[1:no.Damaged,], aes(x=PC1, y=PC2, colour=factor(Species), size=3), shape=10)} +
{if(no.Modern != 0)geom_point(data=sampleSubset[(1+no.Damaged):(no.Damaged+no.Modern),], aes(x=PC1, y=PC2, colour=factor(Species)))} +
labs(color = "Species") +
{if(no.Ancient != 0)geom_point(data=sampleSubset[(1+no.Damaged+no.Modern):(no.Damaged+no.Modern+no.Ancient),], aes(x=PC1, y=PC2, shape=factor(OsteometricalSize)))} +
labs(shape = "Osteometrical Size")  +
# Design
labs(title = titleOfPlot) +
xlab(paste0("PC1 (", PC1.percent, ")" )) +
ylab(paste0("PC2 (", PC2.percent, ")" )) +
guides(size=F)
plot(pca_plot)
# Save plot
ggsave(titlePNG, width = 6.5, height = 4)
return(sampleSubset)
}
samples_dVicuna <- bind_rows(damagedModern[9,], samples_0.01[1:15,], samples_0.01[17:67,])
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna2.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna2.png")
pca <- function(sampleSubset, covMat, titleOfPlot, titlePNG){
# Performs PCA on a given sample subset based on a covariance matrix input
# Read in covariance matrix
C <- as.matrix(read.table(covMat))
# Perform PCA and add Principal Components to sampleSubset
pca_C <- prcomp(C)
sampleSubset <- sampleSubset %>% mutate(PC1 = pca_C$x[, "PC1"], PC2 = pca_C$x[, "PC2"])
sampleSubset$PC1 <- -sampleSubset$PC1
sampleSubset$PC2 <- -sampleSubset$PC2
# Count damaged, modern and ancient samples
# Damaged
no.Damaged <- sum(na.omit(startsWith(sampleSubset$SRR, "d")))
# Modern
no.Modern <- sum(na.omit(startsWith(sampleSubset$SRR, "SRR")))
# Ancient
no.Ancient <- sum(na.omit(startsWith(sampleSubset$ExtractionNumber, "C")))
# Principal Component contributions
PC1.percent <- scales::percent(summary(pca_C)$importance[2,1])
PC2.percent <- scales::percent(summary(pca_C)$importance[2,2])
# PCA plot with entire subset
pca_plot <- ggplot() +
{if(no.Damaged != 0)geom_point(data=sampleSubset[1:no.Damaged,], aes(x=PC1, y=PC2, colour=factor(Species), size=3), shape=10)} +
{if(no.Modern != 0)geom_point(data=sampleSubset[(1+no.Damaged):(no.Damaged+no.Modern),], aes(x=PC1, y=PC2, colour=factor(Species)))} +
labs(color = "Species") +
{if(no.Ancient != 0)geom_point(data=sampleSubset[(1+no.Damaged+no.Modern):(no.Damaged+no.Modern+no.Ancient),], aes(x=PC1, y=PC2, shape=factor(OsteometricalSize)))} +
labs(shape = "Osteometrical Size")  +
# Design
labs(title = titleOfPlot) +
xlab(paste0("PC1 (", PC1.percent, ")" )) +
ylab(paste0("PC2 (", PC2.percent, ")" )) +
guides(size=F)
plot(pca_plot)
# Save plot
ggsave(titlePNG, width = 6.5, height = 4)
return(sampleSubset)
}
samples_dVicuna <- bind_rows(damagedModern[9,], samples_0.01[1:15,], samples_0.01[17:67,])
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna2.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna2.png")
source("~/Downloads/jackknife.R", echo=TRUE)
cat("\t",paste("vicugna.txt",".boot",sep=""),"\n")
########### do not change ################3
l<-commandArgs(TRUE)
getArgs<-function(x,l)
unlist(strsplit(grep(paste("^",x,"=",sep=""),l,val=T),"="))[2]
Args<-function(l,args){
if(! all(sapply(strsplit(l,"="),function(x)x[1])%in%names(args))){
cat("Error -> ",l[!sapply(strsplit(l,"="),function(x)x[1])%in%names(args)]," is not a valid argument")
q("no")
}
arguments<-list()
for(a in names(args))
arguments[[a]]<-getArgs(a,l)
if(any(!names(args)%in%names(arguments)&sapply(args,is.null))){
cat("Error -> ",names(args)[!names(args)%in%names(arguments)&sapply(args,is.null)]," is not optional!\n")
q("no")
}
for(a in names(args))
if(is.null(arguments[[a]]))
arguments[[a]]<-args[[match(a,names(args))]]
arguments
}
print.args<-function(args,des){
if(missing(des)){
des<-as.list(rep("",length(args)))
names(des)<-names(args)
}
cat("->  needed arguments:\n")
mapply(function(x)cat("\t",x,":",des[[x]],"\n"),cbind(names(args)[sapply(args,is.null)]))
cat("->  optional arguments (defaults):\n")
mapply(function(x)cat("\t",x," (",args[[x]],")",":",des[[x]],"\n"),cbind(names(args)[!sapply(args,is.null)]))
q("no")
}
###### ####### ###### ###### ###### #######
# choose your parameters and defaults
# NULL is an non-optional argument, NA is an optional argument with no default, others are the default arguments
args<-list(file=NULL,indNames=NULL,outfile="out",boot=0)
#if no argument are given prints the need arguments and the optional ones with default
des<-list(file="the .abbababa filename",indNames="list of individual names (you can use the bam.filelist)",outfile="name of output file",boot="print results for each bootstrap(jackknife), 0=NO")
######################################
#######get arguments and add to workspace
### do not change
if(length(l)==0) print.args(args,des)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knit("input.Rmd")
0.0667 + 0.009 + 0.003 + 0.0088 + 0.0046 + 0.0648
0.0067 + 0.0189 + 0.0718
0.0667 + 0.009 + 0.003 + 0.0088 + 0.0046 + 0.0648
0.0067 + 0.0189 + 0.0718
0.0667 + 0.009 + 0.003 + 0.0088 + 0.0046 + 0.0648
# likelihood for each species is Pr(twins) * Pr(singleton)
a_likelihood <- 0.1 * (1 - 0.1)
b_likelihood <- 0.2 * (1 - 0.2)
# compute posterior probabilities
likelihood <- c(a_likelihood, b_likelihood)
prior <- c(1, 1)
posterior <- likelihood * prior
posterior <- posterior / sum(posterior)
posterior[1]
posterior
0.15 * 0.85
0.045 / 0.1275
(0.09 * 0.5) / 0.1275
0.045/0.1275
(0.045/0.1275)
(0.045*2)/(2*0.1275)
2*0.1275
0.5(0.1*0.9) + 0.5(0.2*0.8)
0.5*(0.1*0.9) + 0.5*(0.2*0.8)
(213 * 2.5)
(213 * 2.5) / 60
(213 / 2.5)
library(ggforce)
library(tidyverse)
source("~/MScBioinformatics/Thesis/geography/mapping.R", echo=TRUE)
setwd("~/MScBioinformatics/Thesis/geography")
source("~/MScBioinformatics/Thesis/geography/mapping.R", echo=TRUE)
