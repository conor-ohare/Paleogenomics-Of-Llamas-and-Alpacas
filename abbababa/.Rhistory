"pcaPlots/angsd_0.01.png")
# filter(samples_0.01.pca, PC1 < -1 & between(PC2,-0.1,0 ))
filter(samples_0.001.pca, between(PC1, 1, 2) & PC2 < 0)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram()
# Import modules
library(tidyverse)
library(ggplot2)
library(scales)
# Given samples
modern <- read_csv("modern.csv")
ancient <- read_csv("ancient.csv")
# List of damaged individuals
damaged <- list("SRR11905246", "SRR11905247",
"SRR11905250", "SRR11905251",
"SRR11905255", "SRR11905256",
"SRR11905266", "SRR11905267",
"SRR11905260", "SRR11905262")
# No down-sampling for damaged individuals
damagedModern <- read_csv("modern_damage.csv")
# Down-sampling for damaged individuals
# NOT YET COMPUTED
# Bind modern, ancient, and damaged modern samples
samples <- bind_rows(modern, ancient)
samplesWithDamaged <- bind_rows(damagedModern, modern, ancient) %>% filter(!SRR %in% damaged)
samplesWithDamaged$OsteometricalSize[1:10] <- c("Big size", "Big size", "Big size", "Big size", "Small size", "Small size", "Small size", "Small size", "Small size", "Small size")
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram() +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram() +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato") +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato") +
scale_x_continuous(breaks = round(seq(min(Coverage), max(Coverage), by = 0.5),1)) +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato") +
scale_x_continuous(breaks = round(seq(min(ancient$Coverage), max(ancient$Coverage), by = 0.5),1)) +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato") +
scale_x_continuous(breaks = round(seq(min(ancient$Coverage), max(ancient$Coverage), by = 0.05),1)) +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato") +
scale_x_continuous(breaks = pretty(ancient$Coverage, n = 10)) +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato") +
scale_x_continuous(breaks = pretty(ancient$Coverage, n = 20)) +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato", binwidth = 0.005) +
scale_x_continuous(breaks = pretty(ancient$Coverage, n = 20)) +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
coverage_plot <- ancient %>% ggplot(aes(x=Coverage)) +
geom_histogram(color="black", fill="tomato", binwidth = 0.005) +
scale_x_continuous(breaks = pretty(ancient$Coverage, n = 20)) +
xlab("Coverage") +
ylab("Frequency") +
theme_bw()
plot(coverage_plot)
ggsave("coverage_plot.png", width = 6.5, height = 4)
ancient %>% filter(Coverage > 0.01)
ancient %>% filter(Coverage > 0.1)
filter(samples_0.01.pca, between(PC1,-2,-1) & between(PC2,-0.1,0))
filter(samples_0.01.pca, between(PC1,-2,-1) & between(PC2,-0.22,0.1))
filter(samples_0.01.pca, between(PC1,-2,-1) & between(PC2,-0.1,0))
filter(samples_0.1.pca, PC1 < -1, between(PC2, 0.1, 0.25))
samples
samples_LamaWithDamaged <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.01) %>%
filter(!row_number() %in% c(2, 4))
samples_LamaWithDamaged <- bind_rows(samples_LamaWithDamaged[1:3,], samples[3,], samples_LamaWithDamaged[4:5,],  samples[7,], samples_LamaWithDamaged[6:30,])
samples_LamasWithDamaged_0.01.pca <- pca(samples_LamaWithDamaged, "angsd/angsd_LamaWithDamaged_ds0.1.covMat", "PCA (>0.01X) using ANGSD (Lama)", "pcaLamasWithDamaged_ds0.1.png")
filter(samples_LamasWithDamaged_0.01.pca, between(PC1, -0.5, -0.2) & PC2 < 0)
# 0.1763050	-0.36469092
samplesWithDamaged_ds0.1.geno.pca <- pca(samplesWithDamaged_0.001, "angsd/angsd_allWithDamaged_ds0.1.cov", "PCA (>0.001X) using ANGSD (including downsampled modern samples)", "pcaPlots/angsd_allWithDamaged_ds0.1.png")
samplesWithDamaged_ds0.1.geno.pca <- pca(samplesWithDamaged_0.001, "angsd/angsd_allWithDamaged_ds0.1.cov", "PCA (>0.001X) using ANGSD (including downsampled modern samples)", "pcaPlots/angsd_allWithDamaged_ds0.1.png")
samplesWithDamaged_ds0.1.geno.pca <- pca(samplesWithDamaged_0.001, "angsd/angsd_allWithDamaged_ds0.1.covMat", "PCA (>0.001X) using ANGSD (including downsampled modern samples)", "pcaPlots/angsd_allWithDamaged_ds0.1.png")
samples_LamaWithDamaged_0.1 <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.1)
samples_LamaWithDamaged_0.1
samples_LamaWithDamaged_0.1 <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.1) %>%
filter(!row_number() %in% c(2, 4))
samples_LamaWithDamaged_0.1
samples_LamaWithDamaged_0.1 <- bind_rows(samples_LamaWithDamaged_0.1[1:3,], samples[3,], samples_LamaWithDamaged_0.1[4:5,],  samples_0.1[7,], samples_LamaWithDamaged[6:30,])
samples_LamaWithDamaged_0.1
samples_LamaWithDamaged_0.1 <- bind_rows(samples_LamaWithDamaged_0.1[1:3,], samples[3,], samples_LamaWithDamaged_0.1[4:5,],  samples_0.1[7,], samples_LamaWithDamaged[6:16,])
samples_LamaWithDamaged_0.1
samples_LamaWithDamaged_0.1 <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.1) %>%
filter(!row_number() %in% c(2, 4))
samples_LamaWithDamaged_0.1 <- bind_rows(samples_LamaWithDamaged_0.1[1:3,], samples[3,], samples_LamaWithDamaged_0.1[4:5,],  samples_0.1[7,], samples_LamaWithDamaged_0.1[6:16,])
samples_LamaWithDamaged_0.1 <- filter(samplesWithDamaged_0.001.pca, PC1 < 0 & Coverage > 0.1) %>%
filter(!row_number() %in% c(2, 4))
samples_LamaWithDamaged_0.1 <- bind_rows(samples_LamaWithDamaged_0.1[1:3,], samples[3,], samples_LamaWithDamaged_0.1[4:5,],  samples_0.1[7,], samples_LamaWithDamaged_0.1[6:16,])
samples_LamasWithDamaged_0.1.pca <- pca(samples_LamaWithDamaged_0.1, "angsd/angsd_LamaWithDamaged_0.1_HC.covMat", "PCA (>0.1X) using ANGSD (Lama)", "pcaLamasWithDamaged_0.1_HC.png")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
samples_0.01
# Import modules
library(tidyverse)
library(ggplot2)
library(scales)
samples_dLama <- bind_rows(damagedModern[1,], samples[1,], samples[3:67])
samples_dLama <- bind_rows(damagedModern[1,], samples[1,], samples[3:67,])
samples_dLama
dLama.pca <- pca(samples_dLama, "angsd/oneDamaged/llama.covMat", "PCA (>0.01x) with one damaged llama", "pca_dLama.png")
samples_dLama <- bind_rows(damagedModern[1,], samples_0.01[1,], samples_0.01[3:67,])
dLama.pca <- pca(samples_dLama, "angsd/oneDamaged/llama.covMat", "PCA (>0.01x) with one damaged llama", "pca_dLama.png")
samples_0.01
damagedModern
samples_0.01
samples_dGuanaco <- bind_rows(damagedModern[3,], samples_0.01[1:5,], samples_0.01[6:67,])
dGuanaco.pca <- pca(samples_dGuanaco, "angsd/oneDamaged/guanaco.covMat", "PCA (>0.01x) with one damaged guanaco", "pca_dGuanaco.png")
samples_0.01
samples_dGuanaco <- bind_rows(damagedModern[3,], samples_0.01[1:5,], samples_0.01[7:67,])
dGuanaco.pca <- pca(samples_dGuanaco, "angsd/oneDamaged/guanaco.covMat", "PCA (>0.01x) with one damaged guanaco", "pca_dGuanaco.png")
samples_dVicuna <- bind_rows(damagedModern[9,], samples_0.01[1:15,], samples_0.01[17:67,])
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna.png")
samples_0.01
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
dGuanaco.pca <- pca(samples_dGuanaco, "angsd/oneDamaged/guanaco1.covMat", "PCA (>0.01x) with one damaged guanaco", "pca_dGuanaco1.png")
samples_dGuanaco <- bind_rows(damagedModern[3,], samples_0.01[1:5,], samples_0.01[7:67,])
# Import modules
library(tidyverse)
library(ggplot2)
library(scales)
samples_dGuanaco <- bind_rows(damagedModern[3,], samples_0.01[1:5,], samples_0.01[7:67,])
dGuanaco.pca <- pca(samples_dGuanaco, "angsd/oneDamaged/guanaco1.covMat", "PCA (>0.01x) with one damaged guanaco", "pca_dGuanaco1.png")
samples_dGuanaco <- bind_rows(damagedModern[3,], samples_0.01[1:5,], samples_0.01[7:67,])
dGuanaco.pca <- pca(samples_dGuanaco, "angsd/oneDamaged/guanaco2.covMat", "PCA (>0.01x) with one damaged guanaco", "pca_dGuanaco2.png")
samples_dVicuna <- bind_rows(damagedModern[9,], samples_0.01[1:15,], samples_0.01[17:67,])
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna2.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna2.png")
samples_dVicuna <- bind_rows(damagedModern[9,], samples_0.01[1:15,], samples_0.01[17:67,])
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna.png")
samples_dLama <- bind_rows(damagedModern[1,], samples_0.01[1,], samples_0.01[3:67,])
dLama.pca <- pca(samples_dLama, "angsd/oneDamaged/llama2.covMat", "PCA (>0.01x) with one damaged llama", "pca_dLama2.png")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# Import modules
library(tidyverse)
library(ggplot2)
library(scales)
filter(samples_0.01.pca, between(PC1,-2,-1 ) & between(PC2,-0.4,0.2 ))
filter(samples_0.01.pca, between(PC1,-2,-1 ) & between(PC2,-0.4,-0.2 ))
filter(samples_0.01.pca, between(PC1,-2,-1 ) & between(PC2,-0.4,0.2 ))
filter(samples_0.01.pca, between(PC1,-2,-1 ) & between(PC2,-0.4,-0.2 ))
filter(samples_0.01.pca, between(PC1,-2,-1 ) & between(PC2,0,0.2))
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
ancient
sum(ancient$Location[ancient$Location==TU-54])
sum(ancient$Location[ancient$Location=='TU-54'])
ancient
ancient %>% filter(Location == 'TU-85') %>% nrow()
# Import modules
library(tidyverse)
library(ggplot2)
library(scales)
ancient %>% filter(Location == 'TU-85') %>% nrow()
ancient %>% filter(Location == 'TU-54') %>% nrow()
dVicuna.pca
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna.png")
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna.png")
samples_dVicuna <- bind_rows(damagedModern[9,], samples_0.01[1:15,], samples_0.01[17:67,])
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna.png")
pca <- function(sampleSubset, covMat, titleOfPlot, titlePNG){
# Performs PCA on a given sample subset based on a covariance matrix input
# Read in covariance matrix
C <- as.matrix(read.table(covMat))
# Perform PCA and add Principal Components to sampleSubset
pca_C <- prcomp(C)
sampleSubset <- sampleSubset %>% mutate(PC1 = pca_C$x[, "PC1"], PC2 = pca_C$x[, "PC2"])
sampleSubset$PC1[,1] <- -sampleSubset$PC1[,1]
# Count damaged, modern and ancient samples
# Damaged
no.Damaged <- sum(na.omit(startsWith(sampleSubset$SRR, "d")))
# Modern
no.Modern <- sum(na.omit(startsWith(sampleSubset$SRR, "SRR")))
# Ancient
no.Ancient <- sum(na.omit(startsWith(sampleSubset$ExtractionNumber, "C")))
# Principal Component contributions
PC1.percent <- scales::percent(summary(pca_C)$importance[2,1])
PC2.percent <- scales::percent(summary(pca_C)$importance[2,2])
# PCA plot with entire subset
pca_plot <- ggplot() +
{if(no.Damaged != 0)geom_point(data=sampleSubset[1:no.Damaged,], aes(x=PC1, y=PC2, colour=factor(Species), size=3), shape=10)} +
{if(no.Modern != 0)geom_point(data=sampleSubset[(1+no.Damaged):(no.Damaged+no.Modern),], aes(x=PC1, y=PC2, colour=factor(Species)))} +
labs(color = "Species") +
{if(no.Ancient != 0)geom_point(data=sampleSubset[(1+no.Damaged+no.Modern):(no.Damaged+no.Modern+no.Ancient),], aes(x=PC1, y=PC2, shape=factor(OsteometricalSize)))} +
labs(shape = "Osteometrical Size")  +
# Design
labs(title = titleOfPlot) +
xlab(paste0("PC1 (", PC1.percent, ")" )) +
ylab(paste0("PC2 (", PC2.percent, ")" )) +
guides(size=F)
plot(pca_plot)
# Save plot
ggsave(titlePNG, width = 6.5, height = 4)
return(sampleSubset)
}
samples_dVicuna <- bind_rows(damagedModern[9,], samples_0.01[1:15,], samples_0.01[17:67,])
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna2.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna2.png")
pca <- function(sampleSubset, covMat, titleOfPlot, titlePNG){
# Performs PCA on a given sample subset based on a covariance matrix input
# Read in covariance matrix
C <- as.matrix(read.table(covMat))
# Perform PCA and add Principal Components to sampleSubset
pca_C <- prcomp(C)
sampleSubset <- sampleSubset %>% mutate(PC1 = pca_C$x[, "PC1"], PC2 = pca_C$x[, "PC2"])
sampleSubset$PC1 <- -sampleSubset$PC1
# Count damaged, modern and ancient samples
# Damaged
no.Damaged <- sum(na.omit(startsWith(sampleSubset$SRR, "d")))
# Modern
no.Modern <- sum(na.omit(startsWith(sampleSubset$SRR, "SRR")))
# Ancient
no.Ancient <- sum(na.omit(startsWith(sampleSubset$ExtractionNumber, "C")))
# Principal Component contributions
PC1.percent <- scales::percent(summary(pca_C)$importance[2,1])
PC2.percent <- scales::percent(summary(pca_C)$importance[2,2])
# PCA plot with entire subset
pca_plot <- ggplot() +
{if(no.Damaged != 0)geom_point(data=sampleSubset[1:no.Damaged,], aes(x=PC1, y=PC2, colour=factor(Species), size=3), shape=10)} +
{if(no.Modern != 0)geom_point(data=sampleSubset[(1+no.Damaged):(no.Damaged+no.Modern),], aes(x=PC1, y=PC2, colour=factor(Species)))} +
labs(color = "Species") +
{if(no.Ancient != 0)geom_point(data=sampleSubset[(1+no.Damaged+no.Modern):(no.Damaged+no.Modern+no.Ancient),], aes(x=PC1, y=PC2, shape=factor(OsteometricalSize)))} +
labs(shape = "Osteometrical Size")  +
# Design
labs(title = titleOfPlot) +
xlab(paste0("PC1 (", PC1.percent, ")" )) +
ylab(paste0("PC2 (", PC2.percent, ")" )) +
guides(size=F)
plot(pca_plot)
# Save plot
ggsave(titlePNG, width = 6.5, height = 4)
return(sampleSubset)
}
samples_dVicuna <- bind_rows(damagedModern[9,], samples_0.01[1:15,], samples_0.01[17:67,])
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna2.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna2.png")
pca <- function(sampleSubset, covMat, titleOfPlot, titlePNG){
# Performs PCA on a given sample subset based on a covariance matrix input
# Read in covariance matrix
C <- as.matrix(read.table(covMat))
# Perform PCA and add Principal Components to sampleSubset
pca_C <- prcomp(C)
sampleSubset <- sampleSubset %>% mutate(PC1 = pca_C$x[, "PC1"], PC2 = pca_C$x[, "PC2"])
sampleSubset$PC1 <- -sampleSubset$PC1
sampleSubset$PC2 <- -sampleSubset$PC2
# Count damaged, modern and ancient samples
# Damaged
no.Damaged <- sum(na.omit(startsWith(sampleSubset$SRR, "d")))
# Modern
no.Modern <- sum(na.omit(startsWith(sampleSubset$SRR, "SRR")))
# Ancient
no.Ancient <- sum(na.omit(startsWith(sampleSubset$ExtractionNumber, "C")))
# Principal Component contributions
PC1.percent <- scales::percent(summary(pca_C)$importance[2,1])
PC2.percent <- scales::percent(summary(pca_C)$importance[2,2])
# PCA plot with entire subset
pca_plot <- ggplot() +
{if(no.Damaged != 0)geom_point(data=sampleSubset[1:no.Damaged,], aes(x=PC1, y=PC2, colour=factor(Species), size=3), shape=10)} +
{if(no.Modern != 0)geom_point(data=sampleSubset[(1+no.Damaged):(no.Damaged+no.Modern),], aes(x=PC1, y=PC2, colour=factor(Species)))} +
labs(color = "Species") +
{if(no.Ancient != 0)geom_point(data=sampleSubset[(1+no.Damaged+no.Modern):(no.Damaged+no.Modern+no.Ancient),], aes(x=PC1, y=PC2, shape=factor(OsteometricalSize)))} +
labs(shape = "Osteometrical Size")  +
# Design
labs(title = titleOfPlot) +
xlab(paste0("PC1 (", PC1.percent, ")" )) +
ylab(paste0("PC2 (", PC2.percent, ")" )) +
guides(size=F)
plot(pca_plot)
# Save plot
ggsave(titlePNG, width = 6.5, height = 4)
return(sampleSubset)
}
samples_dVicuna <- bind_rows(damagedModern[9,], samples_0.01[1:15,], samples_0.01[17:67,])
dVicuna.pca <- pca(samples_dVicuna, "angsd/oneDamaged/vicuna2.covMat", "PCA (>0.01x) with one damaged vicuna", "pca_dVicuna2.png")
source("~/Downloads/jackknife.R", echo=TRUE)
cat("\t",paste("vicugna.txt",".boot",sep=""),"\n")
########### do not change ################3
l<-commandArgs(TRUE)
getArgs<-function(x,l)
unlist(strsplit(grep(paste("^",x,"=",sep=""),l,val=T),"="))[2]
Args<-function(l,args){
if(! all(sapply(strsplit(l,"="),function(x)x[1])%in%names(args))){
cat("Error -> ",l[!sapply(strsplit(l,"="),function(x)x[1])%in%names(args)]," is not a valid argument")
q("no")
}
arguments<-list()
for(a in names(args))
arguments[[a]]<-getArgs(a,l)
if(any(!names(args)%in%names(arguments)&sapply(args,is.null))){
cat("Error -> ",names(args)[!names(args)%in%names(arguments)&sapply(args,is.null)]," is not optional!\n")
q("no")
}
for(a in names(args))
if(is.null(arguments[[a]]))
arguments[[a]]<-args[[match(a,names(args))]]
arguments
}
print.args<-function(args,des){
if(missing(des)){
des<-as.list(rep("",length(args)))
names(des)<-names(args)
}
cat("->  needed arguments:\n")
mapply(function(x)cat("\t",x,":",des[[x]],"\n"),cbind(names(args)[sapply(args,is.null)]))
cat("->  optional arguments (defaults):\n")
mapply(function(x)cat("\t",x," (",args[[x]],")",":",des[[x]],"\n"),cbind(names(args)[!sapply(args,is.null)]))
q("no")
}
###### ####### ###### ###### ###### #######
# choose your parameters and defaults
# NULL is an non-optional argument, NA is an optional argument with no default, others are the default arguments
args<-list(file=NULL,indNames=NULL,outfile="out",boot=0)
#if no argument are given prints the need arguments and the optional ones with default
des<-list(file="the .abbababa filename",indNames="list of individual names (you can use the bam.filelist)",outfile="name of output file",boot="print results for each bootstrap(jackknife), 0=NO")
######################################
#######get arguments and add to workspace
### do not change
if(length(l)==0) print.args(args,des)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knit("input.Rmd")
0.0667 + 0.009 + 0.003 + 0.0088 + 0.0046 + 0.0648
0.0067 + 0.0189 + 0.0718
0.0667 + 0.009 + 0.003 + 0.0088 + 0.0046 + 0.0648
0.0067 + 0.0189 + 0.0718
0.0667 + 0.009 + 0.003 + 0.0088 + 0.0046 + 0.0648
setwd("~/MScBioinformatics/Thesis/abbababa")
library(tidyverse)
library(dplyr)
abbababa(abbababa_modified, "dSRR11905273_LamaGuanicoeCacsilensis", "dSRR11905273_LamaGuanicoeCacsilensis.ABBABABA.png")
library(tidyverse)
library(dplyr)
## --------
# READ DATA
## --------
# Lama genus (accidentally contains vicuña, so needs to be removed)
abbababa_stats <- as_tibble(read.csv("inclDamaged.txt", header = TRUE, sep = "\t")) %>%
filter(!grepl("Vicugna", H1) & !grepl("Vicugna", H2) & !grepl("Vicugna", H3))
# Swap mislabeled cacsilensis based on PCA
abbababa_modified <- abbababa_stats %>%
mutate(H1 = ifelse(str_detect(H1, "SRR11905261|SRR11905272"), "converted_LamaGuanicoeGuanicoe", H1),
H2 = ifelse(str_detect(H2, "SRR11905261|SRR11905272"), "converted_LamaGuanicoeGuanicoe", H2))
# Vicugna genus
vicugna.abbababa <- as_tibble(read.csv("vicugna.txt", header = TRUE, sep = "\t"))
## --------
# FUNCTIONS
## --------
get_second_element <- function(x) {
return(x[2])
}
abbababa <- function(statistics, h3_ind, plot_name){
# (LAMA GENUS) Produce and save D-statistics plot for a sample in the H3 position
dedamaged <- h3_ind
if(substr(h3_ind, 1, 1) == "d") {
dedamaged <- substr(h3_ind, 2, nchar(h3_ind))
}
ancient_stats <- statistics %>%
filter(H3==h3_ind) %>%
filter(!grepl("C21|C72", H1) & !grepl("C21|C72", H2) & !grepl(dedamaged, H1) & !grepl(dedamaged, H2)) %>%
filter(sapply(strsplit(H1, "_"), get_second_element) != sapply(strsplit(H2, "_"), get_second_element)) %>%
mutate(is_bc = grepl("Glama", H2) | (!grepl("Glama", H1) & !grepl("Glama", H2) & !grepl("GuanicoeGuanicoe", H2))) %>%
mutate(col1_new = if_else(is_bc, H2, H1),
col2_new = if_else(is_bc, H1, H2),
col6_new = if_else(is_bc, -Dstat, Dstat)) %>%
select(-c(H1, H2, Dstat, is_bc)) %>%
rename(H1 = col1_new, H2 = col2_new, Dstat = col6_new) %>%
mutate(Comparison = paste(sapply(strsplit(H1, "_"), get_second_element), sapply(strsplit(H2, "_"), get_second_element), sep="-"))
print(distinct(ancient_stats, select=Comparison))
ancient_stats$Comparison <- as.factor(ancient_stats$Comparison)
p <- ggplot(ancient_stats, aes(x=Comparison, y=Dstat)) +
geom_jitter(position=position_jitter(0.1), aes(colour = abs(Z) > 3)) +
scale_colour_manual(name = '|Z| > 3', values = setNames(c('tomato','black'),c(T, F))) +
scale_x_discrete(labels= c("A = Llama, B = Cacsilensis",
"A = Llama, B = Guanaco",
"A = Cacsilensis, B = Guanaco")) +
scale_y_continuous(limits = c(-0.5, 0.5)) +
labs(
x = "Comparisons",
y = "D-statistic",
size = 10) +
theme_bw() +
theme(legend.position = c(.9, .8)) +
theme(axis.text.x = element_text(size = 9))  +
theme(axis.text.y = element_text(size = 10))
plot(p)
# Save plot
ggsave(plot_name, width = 6.5, height = 4)
}
abbababa_vicugna <- function(statistics, h3_ind, plot_name){
# (VICUGNA GENUS) Produce and save D-statistics plot for a sample in the H3 position
dedamaged <- h3_ind
if(substr(h3_ind, 1, 1) == "d") {
dedamaged <- substr(h3_ind, 2, nchar(h3_ind))
}
ancient_stats <- statistics %>%
filter(H3==h3_ind) %>%
filter(!grepl("C20", H1) & !grepl("C20", H2) & !grepl(dedamaged, H1) & !grepl(dedamaged, H2)) %>%
filter(sapply(strsplit(H1, "_"), get_second_element) != sapply(strsplit(H2, "_"), get_second_element)) %>%
mutate(is_bc = grepl("Pacos", H2) | (!grepl("Pacos", H1) & !grepl("Pacos", H2) & !grepl("VicugnaVicugna", H2))) %>%
mutate(col1_new = if_else(is_bc, H2, H1),
col2_new = if_else(is_bc, H1, H2),
col6_new = if_else(is_bc, -Dstat, Dstat)) %>%
select(-c(H1, H2, Dstat, is_bc)) %>%
rename(H1 = col1_new, H2 = col2_new, Dstat = col6_new) %>%
mutate(Comparison = paste(sapply(strsplit(H1, "_"), get_second_element), sapply(strsplit(H2, "_"), get_second_element), sep="-"))
print(distinct(ancient_stats, select=Comparison))
ancient_stats$Comparison <- as.factor(ancient_stats$Comparison)
print(ancient_stats$Comparison)
p <- ggplot(ancient_stats, aes(x=Comparison, y=Dstat)) +
geom_jitter(position=position_jitter(0.1), aes(colour = abs(Z) > 3)) +
scale_colour_manual(name = '|Z| > 3', values = setNames(c('tomato','black'),c(T, F))) +
scale_x_discrete(labels= c("A = Alpaca, B = Mensalis",
"A = Alpaca, B = Vicuña",
"A = Vicuña, B = Mensalis")) +
scale_y_continuous(limits = c(-0.5, 0.5)) +
labs(
x = "Comparisons",
y = "D-statistic",
size = 20) +
theme_bw() +
theme(legend.position = c(.9, .8)) +
theme(axis.text.x = element_text(size = 9))  +
theme(axis.text.y = element_text(size = 10))
plot(p)
# Save plot
ggsave(plot_name, width = 6.5, height = 4)
}
compare_damage <- function(statistics, h3_ind, plot_name){
# (LAMA GENUS) Compare modern sample D-statistics to its damaged modern counterpart
tb_nodamage <- statistics %>%
filter(startsWith(H3, paste0(h3_ind, collapse = ""))) %>%
filter(!grepl("C21|C72", H1) & !grepl("C21|C72", H2) & !grepl(h3_ind, H1) & !grepl(h3_ind, H2)) %>%
filter(sapply(strsplit(H1, "_"), get_second_element) != sapply(strsplit(H2, "_"), get_second_element)) %>%
mutate(is_bc = grepl("Glama", H2) | (!grepl("Glama", H1) & !grepl("Glama", H2) & !grepl("Cacsilensis", H2))) %>%
mutate(col1_new = if_else(is_bc, H2, H1),
col2_new = if_else(is_bc, H1, H2),
col6_new = if_else(is_bc, -Dstat, Dstat)) %>%
select(-c(H1, H2, Dstat, is_bc)) %>%
rename(H1 = col1_new, H2 = col2_new, Dstat = col6_new) %>%
mutate(Comparison = paste(sapply(strsplit(H1, "_"), get_second_element), sapply(strsplit(H2, "_"), get_second_element), sep="-")) %>%
arrange(H1, H2) %>%
rename("D_nodamage" = Dstat)
tb_nodamage$Comparison <- as.factor(tb_nodamage$Comparison)
damaged_version <- paste("d",h3_ind, sep="")
print(damaged_version)
tb_damage <- statistics %>%
filter(startsWith(H3, paste0(damaged_version, collapse = ""))) %>%
filter(!grepl("C21|C72", H1) & !grepl("C21|C72", H2) & !grepl(h3_ind, H1) & !grepl(h3_ind, H2)) %>%
filter(sapply(strsplit(H1, "_"), get_second_element) != sapply(strsplit(H2, "_"), get_second_element)) %>%
mutate(is_bc = grepl("Glama", H2) | (!grepl("Glama", H1) & !grepl("Glama", H2) & !grepl("Cacsilensis", H2))) %>%
mutate(col1_new = if_else(is_bc, H2, H1),
col2_new = if_else(is_bc, H1, H2),
col6_new = if_else(is_bc, -Dstat, Dstat)) %>%
select(-c(H1, H2, Dstat, is_bc)) %>%
rename(H1 = col1_new, H2 = col2_new, Dstat = col6_new) %>%
mutate(Comparison = paste(sapply(strsplit(H1, "_"), get_second_element), sapply(strsplit(H2, "_"), get_second_element), sep="-")) %>%
arrange(H1, H2) %>%
rename("D_damage" = Dstat)
tb_damage$Comparison <- as.factor(tb_damage$Comparison)
print(tb_damage)
combined_df <- bind_cols(select(tb_nodamage, D_nodamage), select(tb_damage, D_damage))
print(combined_df)
p <- ggplot(combined_df, aes(x=D_nodamage, y=D_damage)) +
geom_point() +
labs(
x = "D-statistic (no damage)",
y = "D-statistic (damage)") +
theme_bw()
plot(p)
# Save plot
ggsave(plot_name, width = 6.5, height = 4)
}
## ------------------------------------------
# --------------
## COMPUTE PLOTS
# --------------
# D-statistics for H3 sample
abbababa(abbababa_modified, "dSRR11905273_LamaGuanicoeCacsilensis", "dSRR11905273_LamaGuanicoeCacsilensis.ABBABABA.png")
abbababa(abbababa_modified, "C72", "C72.ABBABABA_modified.png")
abbababa(abbababa_modified, "dSRR11905250_LamaGuanicoeGuanicoe", "dGuanaco.ABBABABA_modified.png")
abbababa(abbababa_modified, "SRR11905273_LamaGuanicoeCacsilensis", "Cacsilensis.ABBABABA.png")
abbababa_vicugna(vicugna.abbababa, "C20", "C20.ABBABABA.png")
abbababa(abbababa_modified, "SRR11905251_LamaGuanicoeGuanicoe", "SRR11905251.ABBABABA.png")
abbababa_vicugna(vicugna.abbababa, "SRR11905263_VicugnaVicugnaVicugna", "SRR11905263.ABBABABA.png")
abbababa(abbababa_modified, "C21", "C21.ABBABABA_modified.png")
abbababa(abbababa_modified, "SRR11905270_LamaGlama", "SRR11905270_LamaGlama.ABBABABA.png")
unique(abbababa_modified$H1)
# Comaprative plots
compare_damage(abbababa_modified, "SRR11905250", "SRR11905250_compare.png")
compare_damage(abbababa_modified, "SRR11905273", "SRR11905273_compare.png")
